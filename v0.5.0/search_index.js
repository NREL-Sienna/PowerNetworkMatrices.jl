var documenterSearchIndex = {"docs":
[{"location":"tutorials/intro_page/#SIIP-Examples","page":"Tutorials","title":"SIIP-Examples","text":"","category":"section"},{"location":"tutorials/intro_page/","page":"Tutorials","title":"Tutorials","text":"All the tutorials for the SIIP project are part of a separate repository SIIP-Examples.","category":"page"},{"location":"quick_start_guide/#Quick-Start-Guide","page":"Quick Start Guide","title":"Quick Start Guide","text":"","category":"section"},{"location":"api/internal/#Internal-API","page":"Internal API Reference","title":"Internal API","text":"","category":"section"},{"location":"api/internal/","page":"Internal API Reference","title":"Internal API Reference","text":"Modules = [PowerNetworkMatrices]\nPublic = false","category":"page"},{"location":"api/internal/#PowerNetworkMatrices.PowerNetworkMatrix","page":"Internal API Reference","title":"PowerNetworkMatrices.PowerNetworkMatrix","text":"Type PowerNetworkMatrix gathers all the different types of Matrices considered in this package \n\n\n\n\n\n","category":"type"},{"location":"api/internal/#PowerNetworkMatrices.PowerNetworkMatrixKey","page":"Internal API Reference","title":"PowerNetworkMatrices.PowerNetworkMatrixKey","text":"Structure to store the keys of a power network matrix\n\nArguments\n\nI<:Tuple:       turple containing the indices of the matrix\n\n\n\n\n\n","category":"type"},{"location":"api/internal/#PowerNetworkMatrices.PowerNetworkMatrixKeys","page":"Internal API Reference","title":"PowerNetworkMatrices.PowerNetworkMatrixKeys","text":"Structure to store the keys of a power network matrix\n\nArguments\n\nproduct_iter::Base.Iterators.ProductIterator{T} where T <: Tuple:       iterator of the indices of the network power matrix \n\n\n\n\n\n","category":"type"},{"location":"api/internal/#PowerNetworkMatrices.RowCache","page":"Internal API Reference","title":"PowerNetworkMatrices.RowCache","text":"Structure used for saving the rows of the Virtual PTDF matrix.\n\nArguments\n\ntemp_cache::Dict{Int, Array{Float64}}:       Dictionay saving the row of the PTDF matrix\npersistent_cache_keys::Set{Int}:       Set listing the rows saved in temp_cache\nmax_cache_size::Int       Defines the maximum allowed cache size (rows*row_size)\nmax_num_keys::Int       Defines the maximum number of keys saved (rows of the matrix)\n\n\n\n\n\n","category":"type"},{"location":"api/internal/#Base.eachindex-Tuple{VirtualPTDF}","page":"Internal API Reference","title":"Base.eachindex","text":"eachindex(vptdf)\n\n\nGives the cartesian indexes of the PTDF matrix (same as the BA one).\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#Base.empty!-Tuple{PowerNetworkMatrices.RowCache}","page":"Internal API Reference","title":"Base.empty!","text":"empty!(cache)\n\n\nErases the cache.\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#Base.getindex-Tuple{PowerNetworkMatrices.RowCache, Int64}","page":"Internal API Reference","title":"Base.getindex","text":"getindex(cache, key)\n\n\nGets the row of the stored matrix in cache.\n\nArguments\n\ncache::RowCache:       cache where the row vector is going to be saved\nkey::Int:       row number (corresponding to the enumerated branch index) related to the row vector.\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#Base.getindex-Tuple{VirtualPTDF, Any, Any}","page":"Internal API Reference","title":"Base.getindex","text":"getindex(vptdf, row, column)\n\n\nGets the value of the element of the PTDF matrix given the row and column indices corresponding to the branch and buses one respectively. If column is a Colon then  the entire row is returned.\n\nArguments\n\nvptdf::VirtualPTDF:       VirtualPTDF struct where to evaluate and store the values.\nrow:       Branch index.\ncolumn:       Bus index. If Colon then get the values of the whole row.\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#Base.haskey-Tuple{PowerNetworkMatrices.RowCache, Int64}","page":"Internal API Reference","title":"Base.haskey","text":"haskey(cache, key)\n\n\nChecks if key is present as a key of the dictionary in cache\n\nArguments\n\ncache::RowCache:       cache where data is stored.\nkey::Int:       row number (corresponds to the enumerated branch index).\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#Base.isempty-Tuple{PowerNetworkMatrices.RowCache}","page":"Internal API Reference","title":"Base.isempty","text":"isempty(cache)\n\n\nCheck if cache is empty.\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#Base.isempty-Tuple{VirtualPTDF}","page":"Internal API Reference","title":"Base.isempty","text":"isempty(vptdf)\n\n\nChecks if the any of the fields of VirtualPTDF is empty.\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#Base.length-Tuple{PowerNetworkMatrices.RowCache}","page":"Internal API Reference","title":"Base.length","text":"length(cache)\n\n\nShows the number of rows stored in cache\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#Base.setindex!-Tuple{PowerNetworkMatrices.RowCache, Array{Float64}, Int64}","page":"Internal API Reference","title":"Base.setindex!","text":"setindex!(cache, val, key)\n\n\nAllocates vector as row of the matrix saved in cache.\n\nArguments\n\ncache::RowCache:       cache where the row vector is going to be saved\nval::Array{Float64}:       vector to be saved\nkey::Int:       row number (corresponding to the enumerated branch index) related to the input row vector\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#Base.setindex!-Tuple{VirtualPTDF, Any, CartesianIndex}","page":"Internal API Reference","title":"Base.setindex!","text":"setindex!(_, _, _)\n\n\n!!! STILL TO IMPLEMENT !!!\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#Base.setindex!-Tuple{VirtualPTDF, Any, Vararg{Any}}","page":"Internal API Reference","title":"Base.setindex!","text":"setindex!(_, _, idx)\n\n\n!!! STILL TO IMPLEMENT !!!\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#Base.size-Tuple{VirtualPTDF}","page":"Internal API Reference","title":"Base.size","text":"size(vptdf)\n\n\nGives the size of the whole PTDF matrix, not the number of rows stored.\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#PowerNetworkMatrices._binfo_check-Tuple{Int64}","page":"Internal API Reference","title":"PowerNetworkMatrices._binfo_check","text":"_binfo_check(binfo)\n\n\n!!! MISSING DOCUMENTATION !!!\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#PowerNetworkMatrices._calculate_PTDF_matrix_DENSE-Union{Tuple{T}, Tuple{Matrix{Int8}, Matrix{T}, Vector{Int64}, Vector{Float64}}} where T<:Union{Float32, Float64}","page":"Internal API Reference","title":"PowerNetworkMatrices._calculate_PTDF_matrix_DENSE","text":"_calculate_PTDF_matrix_DENSE(\n    A,\n    BA,\n    ref_bus_positions,\n    dist_slack\n)\n\n\nFunciton for internal use only.\n\nComputes the PTDF matrix by means of the LAPACK and BLAS functions for dense matrices.\n\nArguments\n\nA::Matrix{Int8}:       Incidence Matrix\nBA::Matrix{T} where {T <: Union{Float32, Float64}}:       BA matrix\nref_bus_positions::Vector{Int}:       vector containing the indexes of the reference slack buses.\ndist_slack::Vector{Float64}):       vector containing the weights for the distributed slacks.\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#PowerNetworkMatrices._calculate_PTDF_matrix_KLU-Tuple{SparseArrays.SparseMatrixCSC{Int8, Int64}, SparseArrays.SparseMatrixCSC{Float64, Int64}, Vector{Int64}, Vector{Float64}}","page":"Internal API Reference","title":"PowerNetworkMatrices._calculate_PTDF_matrix_KLU","text":"_calculate_PTDF_matrix_KLU(\n    A,\n    BA,\n    ref_bus_positions,\n    dist_slack\n)\n\n\nFunciton for internal use only.\n\nComputes the PTDF matrix by means of the KLU.LU factorization for sparse matrices.\n\nArguments\n\nA::SparseArrays.SparseMatrixCSC{Int8, Int}:       Incidence Matrix\nBA::SparseArrays.SparseMatrixCSC{Float64, Int}:       BA matrix\nref_bus_positions::Vector{Int}:       vector containing the indexes of the reference slack buses.\ndist_slack::Vector{Float64}:       vector containing the weights for the distributed slacks.\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#PowerNetworkMatrices._calculate_PTDF_matrix_MKLPardiso-Tuple{SparseArrays.SparseMatrixCSC{Int8, Int64}, SparseArrays.SparseMatrixCSC{Float64, Int64}, Vector{Int64}, Vector{Float64}}","page":"Internal API Reference","title":"PowerNetworkMatrices._calculate_PTDF_matrix_MKLPardiso","text":"_calculate_PTDF_matrix_MKLPardiso(\n    A,\n    BA,\n    ref_bus_positions,\n    dist_slack\n)\n\n\nFunciton for internal use only.\n\nComputes the PTDF matrix by means of the MKL Pardiso for dense matrices.\n\nArguments\n\nA::SparseArrays.SparseMatrixCSC{Int8, Int}:       Incidence Matrix\nBA::SparseArrays.SparseMatrixCSC{Float64, Int}:       BA matrix\nref_bus_positions::Vector{Int}:       vector containing the indexes of the referece slack buses.\ndist_slack::Vector{Float64}:       vector containing the weights for the distributed slacks.\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#PowerNetworkMatrices.assing_reference_buses-Tuple{Dict{Int64, Set{Int64}}, Vector{Int64}}","page":"Internal API Reference","title":"PowerNetworkMatrices.assing_reference_buses","text":"assing_reference_buses(subnetworks, ref_bus_positions)\n\n\n!!! MISSING DOCUMENTATION !!!\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#PowerNetworkMatrices.calculate_ABA_matrix-Tuple{SparseArrays.SparseMatrixCSC{Int8, Int64}, SparseArrays.SparseMatrixCSC{Float64, Int64}, Vector{Int64}}","page":"Internal API Reference","title":"PowerNetworkMatrices.calculate_ABA_matrix","text":"calculate_ABA_matrix(A, BA, ref_bus_positions)\n\n\nEvaluates the ABA matrix given the System's Incidence matrix (A), BA matrix and reference bus positions.\n\nArguments\n\nA::SparseArrays.SparseMatrixCSC{Int8, Int}:       Incidence matrix.\nBA::SparseArrays.SparseMatrixCSC{Float64, Int}       BA matrix.\n\nNOTE:\n\nevaluates A with \"calculateAmatrix\", or extract A.data (if A::IncidenceMatrix)\nevaluates BA with \"calculateBAmatrix\", or extract BA.data (if A::BA_Matrix)\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#PowerNetworkMatrices.calculate_A_matrix-Tuple{Any, Vector{PowerSystems.Bus}}","page":"Internal API Reference","title":"PowerNetworkMatrices.calculate_A_matrix","text":"calculate_A_matrix(branches, buses)\n\n\nEvaluates the Incidence matrix A given the branches and node of a System.\n\nArguments\n\nbranches:       vector containing the branches of the considered system (should be AC branches).\nbuses::Vector{PSY.Bus}:       vector containing the buses of the considered system.\n\nNOTE:\n\nthe matrix features all the columns, including the ones related to the reference buses (each column is related to a system's bus).\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#PowerNetworkMatrices.calculate_BA_matrix-Tuple{Any, Vector{Int64}, Dict{Int64, Int64}}","page":"Internal API Reference","title":"PowerNetworkMatrices.calculate_BA_matrix","text":"calculate_BA_matrix(branches, ref_bus_positions, bus_lookup)\n\n\nEvaluates the BA matrix given the System's banches, reference bus positions and bus_lookup.\n\nArguments\n\nbranches:       vector containing the branches of the considered system (should be AC branches).\nref_bus_positions::Vector{Int}:       Vector containing the indexes of the columns of the BA matrix corresponding       to the refence buses\nbus_lookup::Dict{Int, Int}:       dictionary mapping the bus numbers with their enumerated indexes.\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#PowerNetworkMatrices.calculate_PTDF_matrix_DENSE-Tuple{Any, Vector{PowerSystems.Bus}, Dict{Int64, Int64}, Vector{Float64}}","page":"Internal API Reference","title":"PowerNetworkMatrices.calculate_PTDF_matrix_DENSE","text":"calculate_PTDF_matrix_DENSE(\n    branches,\n    nodes,\n    bus_lookup,\n    dist_slack\n)\n\n\nComputes the PTDF matrix by means of the LAPACK and BLAS functions for dense matrices.\n\nArguments\n\nbranches:       vector of the System AC branches\nnodes::Vector{PSY.Bus}:       vector of the System buses\nbus_lookup::Dict{Int, Int}:       dictionary mapping the bus numbers with their enumerated indexes.\ndist_slack::Vector{Float64}:       vector containing the weights for the distributed slacks.\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#PowerNetworkMatrices.calculate_PTDF_matrix_KLU-Tuple{Any, Vector{PowerSystems.Bus}, Dict{Int64, Int64}, Vector{Float64}}","page":"Internal API Reference","title":"PowerNetworkMatrices.calculate_PTDF_matrix_KLU","text":"calculate_PTDF_matrix_KLU(\n    branches,\n    nodes,\n    bus_lookup,\n    dist_slack\n)\n\n\nComputes the PTDF matrix by means of the KLU.LU factorization for sparse matrices.\n\nArguments\n\nbranches:       vector of the System AC branches\nnodes::Vector{PSY.Bus}:       vector of the System buses\nbus_lookup::Dict{Int, Int}:       dictionary mapping the bus numbers with their enumerated indexes.\ndist_slack::Vector{Float64}:       vector containing the weights for the distributed slacks.\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#PowerNetworkMatrices.calculate_PTDF_matrix_MKLPardiso-Tuple{Any, Vector{PowerSystems.Bus}, Dict{Int64, Int64}, Vector{Float64}}","page":"Internal API Reference","title":"PowerNetworkMatrices.calculate_PTDF_matrix_MKLPardiso","text":"calculate_PTDF_matrix_MKLPardiso(\n    branches,\n    nodes,\n    bus_lookup,\n    dist_slack\n)\n\n\nComputes the PTDF matrix by means of the MKL Pardiso for dense matrices.\n\nArguments\n\nbranches:       vector of the System AC branches\nnodes::Vector{PSY.Bus}:       vector of the System buses\nbus_lookup::Dict{Int, Int}:       dictionary mapping the bus numbers with their enumerated indexes.\ndist_slack::Vector{Float64}:       vector containing the weights for the distributed slacks.\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#PowerNetworkMatrices.calculate_adjacency-Tuple{Any, Vector{PowerSystems.Bus}, Dict{Int64, Int64}}","page":"Internal API Reference","title":"PowerNetworkMatrices.calculate_adjacency","text":"calculate_adjacency(branches, buses, bus_lookup)\n\n\nEvaluates the Adjacency matrix given the System's banches, buses and bus_lookup.\n\nNOTE:\n\nbus_lookup is a dictionary mapping the bus numbers (as shown in the Systems) with their enumerated indxes.\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#PowerNetworkMatrices.calculate_adjacency-Tuple{Any, Vector{PowerSystems.Bus}}","page":"Internal API Reference","title":"PowerNetworkMatrices.calculate_adjacency","text":"calculate_adjacency(branches, buses)\n\n\nEvaluates the Adjacency matrix given the banches and buses of a given System.\n\nArguments\n\nbranches:       vector containing the branches of the considered system (should be AC branches).\nbuses::Vector{PSY.Bus}:       vector containing the buses of the considered system.\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#PowerNetworkMatrices.check_cache_size!-Tuple{PowerNetworkMatrices.RowCache}","page":"Internal API Reference","title":"PowerNetworkMatrices.check_cache_size!","text":"check_cache_size!(cache)\n\n\nCheck saved rows in cache and deletes those ones that are not present in \"persistentcachekeys\".\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#PowerNetworkMatrices.drop_small_entries!-Tuple{PTDF, Float64}","page":"Internal API Reference","title":"PowerNetworkMatrices.drop_small_entries!","text":"drop_small_entries!(mat, tol)\n\n\nElements whose values are below \"tol\" are set to zero (dropped in case of Sparse matrix).\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#PowerNetworkMatrices.find_slack_positions-Tuple{Any}","page":"Internal API Reference","title":"PowerNetworkMatrices.find_slack_positions","text":"find_slack_positions(nodes)\n\n\nGets the indices  of the reference (slack) buses. NOTE:\n\nthe indices  corresponds to the columns of zeros belonging to the PTDF matrix.\nBA and ABA matrix miss the columns related to the reference buses.\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#PowerNetworkMatrices.get_ac_branches-Tuple{PowerSystems.System}","page":"Internal API Reference","title":"PowerNetworkMatrices.get_ac_branches","text":"get_ac_branches(sys)\n\n\nGets the AC branches from a given Systems.\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#PowerNetworkMatrices.get_bus_indices-Tuple{Any, Any}","page":"Internal API Reference","title":"PowerNetworkMatrices.get_bus_indices","text":"get_bus_indices(branch, bus_lookup)\n\n\nEvaluates the bus indices for the given branch.\n\nArguments\n\nbranch:       system's branch\nbus_lookup:       dictionary mapping the system's buses and branches\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#PowerNetworkMatrices.get_buses-Tuple{PowerSystems.System}","page":"Internal API Reference","title":"PowerNetworkMatrices.get_buses","text":"get_buses(sys)\n\n\nGets the buses from a given System\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#PowerNetworkMatrices.get_data-Tuple{PowerNetworkMatrices.PowerNetworkMatrix}","page":"Internal API Reference","title":"PowerNetworkMatrices.get_data","text":"get_data(mat)\n\n\nreturns the raw array data of the PowerNetworkMatrix\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#PowerNetworkMatrices.get_lookup-Tuple{PowerNetworkMatrices.PowerNetworkMatrix}","page":"Internal API Reference","title":"PowerNetworkMatrices.get_lookup","text":"get_lookup(mat)\n\n\nreturns the lookup tuple of the `PowerNetworkMatrix`. The first entry corresponds\nto the first dimension and the second entry corresponds to the second dimension. For\ninstance in Ybus the first dimension is buses and second dimension is buses too, and in\nPTDF the first dimension is branches and the second dimension is buses\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#PowerNetworkMatrices.get_tol-Tuple{VirtualPTDF}","page":"Internal API Reference","title":"PowerNetworkMatrices.get_tol","text":"get_tol(vptdf)\n\n\nGets the tolerance used for sparsifying the rows of the PTDF matrix\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#PowerNetworkMatrices.lookup_index-Tuple{Any, Dict}","page":"Internal API Reference","title":"PowerNetworkMatrices.lookup_index","text":"lookup_index(i, lookup)\n\n\nGets bus indices to a certain branch index\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#PowerNetworkMatrices.lookup_index-Tuple{PowerSystems.ACBranch, Dict}","page":"Internal API Reference","title":"PowerNetworkMatrices.lookup_index","text":"lookup_index(i, lookup)\n\n\nGets bus indices to a certain branch name\n\nArguments\n\ni::PSY.ACBranch:       Power System AC branch\nlookup::Dict:       Dictionary mapping branch and buses\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#PowerNetworkMatrices.lookup_index-Tuple{PowerSystems.Bus, Dict}","page":"Internal API Reference","title":"PowerNetworkMatrices.lookup_index","text":"lookup_index(i, lookup)\n\n\nGets bus indices to a certain branch name\n\nArguments\n\ni::PSY.ACBranch:       Power System AC branch\nlookup::Dict:       Dictionary mapping branches and buses\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#PowerNetworkMatrices.make_ax_ref-Tuple{AbstractVector{PowerSystems.Bus}}","page":"Internal API Reference","title":"PowerNetworkMatrices.make_ax_ref","text":"make_ax_ref(buses)\n\n\nEvaluates the map linking the system's buses and branches.\n\nArguments\n\nbuses::AbstractVector{PSY.Bus}:       system's buses\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#PowerNetworkMatrices.make_ax_ref-Tuple{AbstractVector}","page":"Internal API Reference","title":"PowerNetworkMatrices.make_ax_ref","text":"make_ax_ref(ax)\n\n\nCheckes if repetitions are present in the dictionary mapping buses and branches.\n\nArguments\n\nax::AbstractVector:       generic abstract vector\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#PowerNetworkMatrices.make_entries_zero!-Tuple{Matrix{Float64}, Float64}","page":"Internal API Reference","title":"PowerNetworkMatrices.make_entries_zero!","text":"make_entries_zero!(dense_array, tol)\n\n\nSets to zero every element of a Dense matrix if absolute values is below a certain tolerance.\n\nArguments\n\ndense_array::Matrix{Float64}: input dense matrix.\ntol::Float64: tolerance.\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#PowerNetworkMatrices.make_entries_zero!-Tuple{SparseArrays.SparseMatrixCSC{Float64, Int64}, Float64}","page":"Internal API Reference","title":"PowerNetworkMatrices.make_entries_zero!","text":"make_entries_zero!(sparse_array, tol)\n\n\nSets to zero every element of a Sparse matrix if absolute values is below a certain tolerance.\n\nArguments\n\nsparse_array::SparseArrays.SparseMatrixCSC{Float64, Int}: input sparse array.\ntol::Float64: tolerance for removing entries in the PTDF matrix.\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#PowerNetworkMatrices.make_entries_zero!-Tuple{Vector{Float64}, Float64}","page":"Internal API Reference","title":"PowerNetworkMatrices.make_entries_zero!","text":"make_entries_zero!(vector, tol)\n\n\nSets to zero every element of a Dense vector if absolute values is below a certain tolerance.\n\nArguments\n\nvector::Vector{Float64}:input dense vector.\ntol::Float64: tolerance.\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#PowerNetworkMatrices.make_sparse_PTDF-Union{Tuple{L}, Tuple{Ax}, Tuple{PTDF{Ax, L, Matrix{Float64}}, Float64}} where {Ax, L}","page":"Internal API Reference","title":"PowerNetworkMatrices.make_sparse_PTDF","text":"make_sparse_PTDF(mat, tol)\n\n\nMakes the PTDF matrix sparse given a certain tolerance \"tol\".\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#PowerNetworkMatrices.purge_one!-Tuple{PowerNetworkMatrices.RowCache}","page":"Internal API Reference","title":"PowerNetworkMatrices.purge_one!","text":"purge_one!(cache)\n\n\nDeletes the row of of key key from the stored matrix in cache.\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#PowerNetworkMatrices.sparsify-Tuple{Matrix{Float64}, Float64}","page":"Internal API Reference","title":"PowerNetworkMatrices.sparsify","text":"sparsify(dense_array, tol)\n\n\nReturn a sparse matrix given a dense one by dropping element whose absolute value is above a certain tolerance.\n\nArguments\n\ndense_array::Matrix{Float64}`:       input matrix (e.g., PTDF matrix).\ntol::Float64:       tolerance.\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#PowerNetworkMatrices.to_index-Tuple{PowerNetworkMatrices.PowerNetworkMatrix, Vararg{Any}}","page":"Internal API Reference","title":"PowerNetworkMatrices.to_index","text":"to_index(A, idx)\n\n\nGiven the indices, gets the values of the power network matrix considered\n\n\n\n\n\n","category":"method"},{"location":"api/internal/#PowerNetworkMatrices.validate_linear_solver-Tuple{String}","page":"Internal API Reference","title":"PowerNetworkMatrices.validate_linear_solver","text":"validate_linear_solver(linear_solver)\n\n\nValidates if the selected linear solver is supported.\n\n\n\n\n\n","category":"method"},{"location":"#PowerNetworkMatrices.jl","page":"Welcome Page","title":"PowerNetworkMatrices.jl","text":"","category":"section"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"CurrentModule = PowerNetworkMatrices","category":"page"},{"location":"#Overview","page":"Welcome Page","title":"Overview","text":"","category":"section"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"PowerNetworkMatrices.jl documentation and code are organized according to the needs of different users depending on their skillset and requirements. In broad terms there are three categories:","category":"page"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"Modeler: Users that want to run a particular analysis or experiment and use PowerNetworkMatrices.jl to develop data sets.\nModel Developer: Users that want to develop custom components and structs in order to exploit PowerNetworkMatrices.jl features to produce custom data sets.\nCode Base Developers: Users that want to add new core functionalities or fix bugs in the core capabilities of PowerNetworkMatrices.jl.","category":"page"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"PowerNetworkMatrices.jl is an active project under development, and we welcome your feedback, suggestions, and bug reports.","category":"page"},{"location":"#Installation","page":"Welcome Page","title":"Installation","text":"","category":"section"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"The latest stable release of PowerNetworkMatrices can be installed using the Julia package manager with","category":"page"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"] add PowerNetworkMatrices","category":"page"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"For the current development version, \"checkout\" this package with","category":"page"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"] add PowerNetworkMatrices#master","category":"page"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"","category":"page"},{"location":"","page":"Welcome Page","title":"Welcome Page","text":"PowerNetworkMatrices has been developed as part of the Scalable Integrated Infrastructure Planning (SIIP) initiative at the U.S. Department of Energy's National Renewable Energy Laboratory (NREL).","category":"page"},{"location":"api/public/#Public-API-Reference","page":"Public API Reference","title":"Public API Reference","text":"","category":"section"},{"location":"api/public/","page":"Public API Reference","title":"Public API Reference","text":"Modules = [PowerNetworkMatrices]\nPublic = true","category":"page"},{"location":"api/public/#PowerNetworkMatrices.ABA_Matrix","page":"Public API Reference","title":"PowerNetworkMatrices.ABA_Matrix","text":"Structure containing the ABA matrix and other relevant data.\n\nArguments\n\ndata::SparseArrays.SparseMatrixCSC{Float64, Int}:       the ABA matrix coming from the product between the Incidence Matrix A and       the Matrix BA\naxes<:NTuple{2, Dict}:       Tuple containing two vectors, the first one contains the names of each        line of the network (each one related to a row of the Matrix in \"data\"),       the second one contains the names of each bus of the network (each one       related to a column of the Matrix in \"data\")\nlookup<:NTuple{2, Dict}:       Tuple containing 2 Dictionaries mapping the number of rows and columns        with the names of branches and buses\nref_bus_positions::Vector{Int}:       Vector containing the indexes of the columns of the BA matrix corresponding       to the refence buses\nK<:Union{Nothing, KLU.KLUFactorization{Float64, Int}}:       either nothing or a container for KLU factorization matrices (LU factorization)\n\n\n\n\n\n","category":"type"},{"location":"api/public/#PowerNetworkMatrices.ABA_Matrix-Tuple{PowerSystems.System}","page":"Public API Reference","title":"PowerNetworkMatrices.ABA_Matrix","text":"ABA_Matrix(sys; factorize)\n\n\nBuilds the ABA matrix from a System\n\nArguments\n\nsys::PSY.System:       system to consider\n\nKeyword arguments\n\nfactorize: if true populates ABA_Matrix.K with KLU factorization matrices\n\n\n\n\n\n","category":"method"},{"location":"api/public/#PowerNetworkMatrices.AdjacencyMatrix","page":"Public API Reference","title":"PowerNetworkMatrices.AdjacencyMatrix","text":"Nodal incidence matrix (Adjacency) is an N x N matrix describing a power system with N buses. It represents the directed connectivity of the buses in a power system.\n\nThe AdjacencyMatrix Struct is indexed using the Bus Numbers, no need for them to be sequential\n\nArguments\n\ndata::SparseArrays.SparseMatrixCSC{Int8, Int}:       stores the incidence matrix\naxes<:NTuple{2, Dict}:       Tuple containing two vectors, the first one contains the names of each       line of the network (each one related to a row of the Matrix in \"data\"),       the second one contains the names of each bus of the network (each one       related to a column of the Matrix in \"data\")\nlookup<:NTuple{2, Dict}:       Tuple containing 2 Dictionaries mapping the number of rows and columns       with the names of branches and buses\nref_bus_positions::Vector{Int}:       Vector containing the indexes of the columns of the BA matrix corresponding       to the refence buses\n\n\n\n\n\n","category":"type"},{"location":"api/public/#PowerNetworkMatrices.AdjacencyMatrix-Tuple{Any, Vector{PowerSystems.Bus}}","page":"Public API Reference","title":"PowerNetworkMatrices.AdjacencyMatrix","text":"AdjacencyMatrix(\n    branches,\n    nodes;\n    check_connectivity,\n    kwargs...\n)\n\n\nBuilds a AdjacencyMatrix from a collection of buses and branches. The return is an N x N AdjacencyMatrix Array indexed with the bus numbers.\n\nArguments\n\ncheck_connectivity::Bool:       Checks connectivity of the network using Depth First Search (DFS) algorithm\n\n\n\n\n\n","category":"method"},{"location":"api/public/#PowerNetworkMatrices.AdjacencyMatrix-Tuple{PowerSystems.System}","page":"Public API Reference","title":"PowerNetworkMatrices.AdjacencyMatrix","text":"AdjacencyMatrix(sys; check_connectivity, kwargs...)\n\n\nBuilds a AdjacencyMatrix from the system. The return is an N x N AdjacencyMatrix Array indexed with the bus numbers.\n\nArguments\n\ncheck_connectivity::Bool:       Checks connectivity of the network using Depth First Search (DFS) algorithm\n\n\n\n\n\n","category":"method"},{"location":"api/public/#PowerNetworkMatrices.BA_Matrix","page":"Public API Reference","title":"PowerNetworkMatrices.BA_Matrix","text":"Structure containing the BA matrix and other relevant data.\n\nArguments\n\ndata::SparseArrays.SparseMatrixCSC{Float64, Int}:       the BA matrix coming from the product between the Incidence Matrix A and       the Matrix of Susceptance B\naxes<:NTuple{2, Dict}:       Tuple containing two vectors, the first one contains the names of each        line of the network (each one related to a row of the Matrix in \"data\"),       the second one contains the names of each bus of the network (each one       related to a column of the Matrix in \"data\")\nlookup<:NTuple{2, Dict}:       Tuple containing 2 Dictionaries mapping the number of rows and columns        with the names of branches and buses\nref_bus_positions::Vector{Int}:       Vector containing the indexes of the columns of the BA matrix corresponding       to the refence buses\n\n\n\n\n\n","category":"type"},{"location":"api/public/#PowerNetworkMatrices.BA_Matrix-Tuple{PowerSystems.System}","page":"Public API Reference","title":"PowerNetworkMatrices.BA_Matrix","text":"BA_Matrix(sys)\n\n\nBuild the BA matrix from a given System\n\n\n\n\n\n","category":"method"},{"location":"api/public/#PowerNetworkMatrices.IncidenceMatrix","page":"Public API Reference","title":"PowerNetworkMatrices.IncidenceMatrix","text":"Incidence matrix: shows connection between buses, defining lines\n\nArguments\n\ndata::SparseArrays.SparseMatrixCSC{Int8, Int}:       the actual Incidence matrix.\naxes<:NTuple{2, Dict}:       Tuple containing two vectors (the first one showing the branches names,       the second showing the buses numbers).\nlookup<:NTuple{2, Dict}:       Tuple containing two dictionaries, the first mapping the branches        and buses with their enumerated indexes.\nref_bus_positions::Vector{Int}:       vector containing the indices of the reference slack buses.\n\n\n\n\n\n","category":"type"},{"location":"api/public/#PowerNetworkMatrices.IncidenceMatrix-Tuple{PowerSystems.System}","page":"Public API Reference","title":"PowerNetworkMatrices.IncidenceMatrix","text":"IncidenceMatrix(sys)\n\n\nBuilds the Incidence matrix by evaluating the actual matrix and other relevant  values.\n\n\n\n\n\n","category":"method"},{"location":"api/public/#PowerNetworkMatrices.LODF","page":"Public API Reference","title":"PowerNetworkMatrices.LODF","text":"LODF(sys)\nLODF(sys, dist_slack)\n\n\nBuilds the LODF matrix from a system. The return is a LOLDF array indexed with the branch name.\n\nArguments\n\nsys::PSY.System:       Power Systems system\ndist_slack::Vector{Float64}:       Vector of weights to be used as distributed slack bus.       The distributed slack vector has to be the same length as the number of buses.\n\n\n\n\n\n","category":"type"},{"location":"api/public/#PowerNetworkMatrices.LODF-2","page":"Public API Reference","title":"PowerNetworkMatrices.LODF","text":"LODF(branches, nodes)\nLODF(branches, nodes, dist_slack)\n\n\nBuilds the LODF matrix from a group of branches and nodes. The return is a LOLDF array indexed with the branch name.\n\nArguments\n\nbranches:       vector of the System AC branches\nnodes::Vector{PSY.Bus}:       vector of the System buses\ndist_slack::Vector{Float64}:       Vector of weights to be used as distributed slack bus.       The distributed slack vector has to be the same length as the number of buses.\n\n\n\n\n\n","category":"type"},{"location":"api/public/#PowerNetworkMatrices.LODF-3","page":"Public API Reference","title":"PowerNetworkMatrices.LODF","text":"Line Outage Distribution Factors (LODFs) are a sensitivity measure of how a change in a line's flow affects the flows on other lines in the system.\n\nArguments\n\ndata<:AbstractArray{Float64, 2}:       the actual Incidence matrix.\naxes<:NTuple{2, Dict}:       Tuple containing two vectors (the first one showing the branches names,       the second showing the buses numbers).\nlookup<:NTuple{2, Dict}:       Tuple containing two dictionaries, the first mapping the branches        and buses with their enumerated indexes.\n\n\n\n\n\n","category":"type"},{"location":"api/public/#PowerNetworkMatrices.PTDF","page":"Public API Reference","title":"PowerNetworkMatrices.PTDF","text":"Power Transfer Distribution Factors (PTDF) indicate the incremental change in real power that occurs on transmission lines due to real power injections changes at the buses.\n\nThe PTDF struct is indexed using the Bus numbers and Branch names.\n\nArguments\n\ndata<:AbstractArray{Float64, 2}:       the actual Incidence matrix.\naxes<:NTuple{2, Dict}:       Tuple containing two vectors (the first one showing the branches names,       the second showing the buses numbers).\nlookup<:NTuple{2, Dict}:       Tuple containing two dictionaries, the first mapping the branches        and buses with their enumerated indexes.\nsubnetworks::Dict{Int, Set{Int}}:       dictionary containing the set of bus indexes defining the subnetworks        of the system.\ntol::Base.RefValue{Float64}:         tolerance used for sportifying the matrix (dropping element whose        absolute value is below this threshold).\n\n\n\n\n\n","category":"type"},{"location":"api/public/#PowerNetworkMatrices.PTDF-Tuple{Any, Vector{PowerSystems.Bus}}","page":"Public API Reference","title":"PowerNetworkMatrices.PTDF","text":"PTDF(branches, nodes; dist_slack, linear_solver, tol)\n\n\nBuilds the PTDF matrix from a group of branches and nodes. The return is a PTDF array indexed with the bus numbers.\n\nArguments\n\nbranches:       vector of the System AC branches\nnodes::Vector{PSY.Bus}:       vector of the System buses\ndist_slack::Vector{Float64}:       vector of weights to be used as distributed slack bus.       The distributed slack vector has to be the same length as the number of buses\nlinear_solver::String:       Linear solver to be used. Options are \"Dense\", \"KLU\" and \"MKLPardiso\ntol::Float64:       Tolerance to eliminate entries in the PTDF matrix (default eps())\n\n\n\n\n\n","category":"method"},{"location":"api/public/#PowerNetworkMatrices.PTDF-Tuple{IncidenceMatrix, BA_Matrix}","page":"Public API Reference","title":"PowerNetworkMatrices.PTDF","text":"PTDF(A, BA; dist_slack, linear_solver, tol)\n\n\nBuilds the PTDF matrix from a system. The return is a PTDF array indexed with the bus numbers.\n\nArguments\n\nA::IncidenceMatrix:       Incidence Matrix (full structure)\nBA::BA_Matrix:       BA matrix (full structure)\ndist_slack::Vector{Float64}:       Vector of weights to be used as distributed slack bus.       The distributed slack vector has to be the same length as the number of buses.\nlinear_solver::String:       Linear solver to be used. Options are \"Dense\", \"KLU\" and \"MKLPardiso.\ntol::Float64:       Tolerance to eliminate entries in the PTDF matrix (default eps()).\n\n\n\n\n\n","category":"method"},{"location":"api/public/#PowerNetworkMatrices.PTDF-Tuple{PowerSystems.System}","page":"Public API Reference","title":"PowerNetworkMatrices.PTDF","text":"PTDF(sys; kwargs...)\n\n\nBuilds the PTDF matrix from a system. The return is a PTDF array indexed with the bus numbers.\n\nArguments\n\nsys::PSY.System:       Power Systems system\n\n\n\n\n\n","category":"method"},{"location":"api/public/#PowerNetworkMatrices.VirtualPTDF","page":"Public API Reference","title":"PowerNetworkMatrices.VirtualPTDF","text":"Power Transfer Distribution Factors (PTDF) indicate the incremental change in  real power that occurs on transmission lines due to real power injections  changes at the buses.\n\nThe PTDF struct is indexed using the Bus numbers and branch names.\n\nArguments\n\nK::KLU.KLUFactorization{Float64, Int}:       LU factorization matrices of the ABA matrix, evaluated by means of KLU\nBA::SparseArrays.SparseMatrixCSC{Float64, Int}:       BA matric\nref_bus_positions::Vector{Int}:       Vector containing the indexes of the columns of the BA matrix corresponding       to the refence buses\ndist_slack::Vector{Float64}:       Vector of weights to be used as distributed slack bus.       The distributed slack vector has to be the same length as the number of buses.\naxes<:NTuple{2, Dict}:       Tuple containing two vectors (the first one showing the branches names,       the second showing the buses numbers).\nlookup<:NTuple{2, Dict}:       Tuple containing two dictionaries, the first mapping the branches        and buses with their enumerated indexes.\ntemp_data::Vector{Float64}:       temporary vector for internal use.\ncache::RowCache:       cache were PTDF rows are stored.\nsubnetworks::Dict{Int, Set{Int}}:       dictionary containing the subsets of buses defining the different subnetwork of the system.\ntol::Base.RefValue{Float64}:       tolerance related to scarification and values to drop.\n\n\n\n\n\n","category":"type"},{"location":"api/public/#PowerNetworkMatrices.VirtualPTDF-Tuple{Any, Vector{PowerSystems.Bus}}","page":"Public API Reference","title":"PowerNetworkMatrices.VirtualPTDF","text":"VirtualPTDF(\n    branches,\n    buses;\n    dist_slack,\n    tol,\n    max_cache_size,\n    persistent_lines\n)\n\n\nBuilds the PTDF matrix from a group of branches and buses. The return is a  PTDF array indexed with the branch numbers.\n\nArguments\n\nbranches:       Vector of the system's AC branches.\nbuses::Vector{PSY.Bus}:       Vector of the system's buses.\ndist_slack::Vector{Float64} = Float64[]:       Vector of weights to be used as distributed slack bus.       The distributed slack vector has to be the same length as the number of buses.\ntol::Float64 = eps():       Tolerance related to sparsification and values to drop.\nmax_cache_size::Int:       max cache size in MiB (inizialized as MAXCACHESIZE_MiB).\npersistent_lines::Vector{String}:       line to be evaluated as soon as the VirtualPTDF is created (initialized as empty vector of strings).\n\n\n\n\n\n","category":"method"},{"location":"api/public/#PowerNetworkMatrices.VirtualPTDF-Tuple{PowerSystems.System}","page":"Public API Reference","title":"PowerNetworkMatrices.VirtualPTDF","text":"VirtualPTDF(sys; kwargs...)\n\n\nBuilds the Virtual PTDF matrix from a system. The return is a VirtualPTDF  struct with an empty cache.\n\n\n\n\n\n","category":"method"},{"location":"api/public/#PowerNetworkMatrices.Ybus","page":"Public API Reference","title":"PowerNetworkMatrices.Ybus","text":"Ybus(branches, nodes)\nYbus(branches, nodes, fixed_admittances; check_connectivity)\n\n\nBuilds a Ybus from a collection of buses and branches. The return is a Ybus Array indexed with the bus numbers and the branch names.\n\nArguments\n\ncheck_connectivity::Bool: Checks connectivity of the network using Depth First Search (DFS)\n\n\n\n\n\n","category":"type"},{"location":"api/public/#PowerNetworkMatrices.Ybus-2","page":"Public API Reference","title":"PowerNetworkMatrices.Ybus","text":"Nodal admittance matrix (Ybus) is an N x N matrix describing a power system with N buses. It represents the nodal admittance of the buses in a power system.\n\nThe Ybus Struct is indexed using the Bus Numbers, no need for them to be sequential\n\n\n\n\n\n","category":"type"},{"location":"api/public/#PowerNetworkMatrices.Ybus-Tuple{PowerSystems.System}","page":"Public API Reference","title":"PowerNetworkMatrices.Ybus","text":"Ybus(sys; kwargs...)\n\n\nBuilds a Ybus from the system. The return is a Ybus Array indexed with the bus numbers and the branch names.\n\nArguments\n\ncheck_connectivity::Bool: Checks connectivity of the network\n\n\n\n\n\n","category":"method"},{"location":"api/public/#PowerNetworkMatrices.factorize-Union{Tuple{ABA_Matrix{Ax, L, Nothing}}, Tuple{L}, Tuple{Ax}} where {Ax, L<:Tuple{Dict, Dict}}","page":"Public API Reference","title":"PowerNetworkMatrices.factorize","text":"factorize(ABA)\n\n\nEvaluates the LU factorization matrices of the ABA matrix, using KLU.\n\nArguments\n\nABA::ABA_Matrix{Ax, L, Nothing} where {Ax, L <: NTuple{2, Dict}}:       container for the ABA matrix, with ABA.K == nothing (LU matrices in K not evaluated)\n\n\n\n\n\n","category":"method"},{"location":"api/public/#PowerNetworkMatrices.find_subnetworks-Tuple{AdjacencyMatrix}","page":"Public API Reference","title":"PowerNetworkMatrices.find_subnetworks","text":"find_subnetworks(M)\n\n\nEvaluates subnetworks by looking for the subsets of nodes connected each other, but not connected with nodes of other subsets.\n\n\n\n\n\n","category":"method"},{"location":"api/public/#PowerNetworkMatrices.find_subnetworks-Tuple{PowerSystems.System}","page":"Public API Reference","title":"PowerNetworkMatrices.find_subnetworks","text":"find_subnetworks(sys)\n\n\nFinds the subnetworks in a system using Depth First Search (DFS). Returns a dictionary keyed by the reference bus of the subnetworks if they exist\n\n\n\n\n\n","category":"method"},{"location":"api/public/#PowerNetworkMatrices.find_subnetworks-Tuple{SparseArrays.SparseMatrixCSC, Vector{Int64}}","page":"Public API Reference","title":"PowerNetworkMatrices.find_subnetworks","text":"find_subnetworks(M, bus_numbers)\n\n\nFinds the subnetworks present in the considered System. This is evaluated by taking a the ABA or Adjacency Matrix.\n\nArguments\n\nM::SparseArrays.SparseMatrixCSC:       input sparse matrix.\nbus_numbers::Vector{Int}:       vector containing the indices of the system's buses.\n\n\n\n\n\n","category":"method"},{"location":"api/public/#PowerNetworkMatrices.validate_connectivity-Tuple{AdjacencyMatrix}","page":"Public API Reference","title":"PowerNetworkMatrices.validate_connectivity","text":"validate_connectivity(M)\n\n\nValidates connectivity by checking that the number of subnetworks is 1 (fully connected network).\n\n\n\n\n\n","category":"method"},{"location":"api/public/#PowerNetworkMatrices.validate_connectivity-Tuple{PowerSystems.System}","page":"Public API Reference","title":"PowerNetworkMatrices.validate_connectivity","text":"validate_connectivity(sys)\n\n\nChecks the network connectivity of the system using Depth First Search (DFS)\n\n\n\n\n\n","category":"method"}]
}
